/*
 * This file is generated by jOOQ.
 */
package eu.fasten.core.data.metadatadb.codegen;


import eu.fasten.core.data.metadatadb.codegen.tables.*;
import eu.fasten.core.data.metadatadb.codegen.tables.records.*;
import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import javax.annotation.processing.Generated;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@Generated(
        value = {
                "https://www.jooq.org",
                "jOOQ version:3.16.3"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ArtifactRepositoriesRecord> ARTIFACT_REPOSITORIES_PKEY = Internal.createUniqueKey(ArtifactRepositories.ARTIFACT_REPOSITORIES, DSL.name("artifact_repositories_pkey"), new TableField[]{ArtifactRepositories.ARTIFACT_REPOSITORIES.ID}, true);
    public static final UniqueKey<ArtifactRepositoriesRecord> UNIQUE_ARTIFACT_REPOSITORIES = Internal.createUniqueKey(ArtifactRepositories.ARTIFACT_REPOSITORIES, DSL.name("unique_artifact_repositories"), new TableField[]{ArtifactRepositories.ARTIFACT_REPOSITORIES.REPOSITORY_BASE_URL}, true);
    public static final UniqueKey<BinaryModuleContentsRecord> UNIQUE_BINARY_MODULE_FILE = Internal.createUniqueKey(BinaryModuleContents.BINARY_MODULE_CONTENTS, DSL.name("unique_binary_module_file"), new TableField[]{BinaryModuleContents.BINARY_MODULE_CONTENTS.BINARY_MODULE_ID, BinaryModuleContents.BINARY_MODULE_CONTENTS.FILE_ID}, true);
    public static final UniqueKey<BinaryModulesRecord> BINARY_MODULES_PKEY = Internal.createUniqueKey(BinaryModules.BINARY_MODULES, DSL.name("binary_modules_pkey"), new TableField[]{BinaryModules.BINARY_MODULES.ID}, true);
    public static final UniqueKey<BinaryModulesRecord> UNIQUE_VERSION_NAME = Internal.createUniqueKey(BinaryModules.BINARY_MODULES, DSL.name("unique_version_name"), new TableField[]{BinaryModules.BINARY_MODULES.PACKAGE_VERSION_ID, BinaryModules.BINARY_MODULES.NAME}, true);
    public static final UniqueKey<CallSitesRecord> UNIQUE_SOURCE_TARGET = Internal.createUniqueKey(CallSites.CALL_SITES, DSL.name("unique_source_target"), new TableField[]{CallSites.CALL_SITES.SOURCE_ID, CallSites.CALL_SITES.TARGET_ID}, true);
    public static final UniqueKey<CallablesRecord> CALLABLES_PKEY = Internal.createUniqueKey(Callables.CALLABLES, DSL.name("callables_pkey"), new TableField[]{Callables.CALLABLES.ID}, true);
    public static final UniqueKey<CallablesRecord> UNIQUE_URI_CALL = Internal.createUniqueKey(Callables.CALLABLES, DSL.name("unique_uri_call"), new TableField[]{Callables.CALLABLES.MODULE_ID, Callables.CALLABLES.FASTEN_URI, Callables.CALLABLES.IS_INTERNAL_CALL}, true);
    public static final UniqueKey<DependenciesRecord> UNIQUE_VERSION_DEPENDENCY_RANGE = Internal.createUniqueKey(Dependencies.DEPENDENCIES, DSL.name("unique_version_dependency_range"), new TableField[]{Dependencies.DEPENDENCIES.PACKAGE_VERSION_ID, Dependencies.DEPENDENCIES.DEPENDENCY_ID, Dependencies.DEPENDENCIES.VERSION_RANGE}, true);
    public static final UniqueKey<FilesRecord> FILES_PKEY = Internal.createUniqueKey(Files.FILES, DSL.name("files_pkey"), new TableField[]{Files.FILES.ID}, true);
    public static final UniqueKey<FilesRecord> UNIQUE_VERSION_PATH = Internal.createUniqueKey(Files.FILES, DSL.name("unique_version_path"), new TableField[]{Files.FILES.PACKAGE_VERSION_ID, Files.FILES.PATH}, true);
    public static final UniqueKey<IngestedArtifactsRecord> INGESTED_ARTIFACTS_PKEY = Internal.createUniqueKey(IngestedArtifacts.INGESTED_ARTIFACTS, DSL.name("ingested_artifacts_pkey"), new TableField[]{IngestedArtifacts.INGESTED_ARTIFACTS.KEY}, true);
    public static final UniqueKey<IngestionRetriesRecord> INGESTION_RETRIES_PKEY = Internal.createUniqueKey(IngestionRetries.INGESTION_RETRIES, DSL.name("ingestion_retries_pkey"), new TableField[]{IngestionRetries.INGESTION_RETRIES.KEY}, true);
    public static final UniqueKey<ModuleContentsRecord> UNIQUE_MODULE_FILE = Internal.createUniqueKey(ModuleContents.MODULE_CONTENTS, DSL.name("unique_module_file"), new TableField[]{ModuleContents.MODULE_CONTENTS.MODULE_ID, ModuleContents.MODULE_CONTENTS.FILE_ID}, true);
    public static final UniqueKey<ModuleNamesRecord> MODULE_NAMES_PKEY = Internal.createUniqueKey(ModuleNames.MODULE_NAMES, DSL.name("module_names_pkey"), new TableField[]{ModuleNames.MODULE_NAMES.ID}, true);
    public static final UniqueKey<ModuleNamesRecord> UNIQUE_MODULE_NAMES = Internal.createUniqueKey(ModuleNames.MODULE_NAMES, DSL.name("unique_module_names"), new TableField[]{ModuleNames.MODULE_NAMES.NAME}, true);
    public static final UniqueKey<ModulesRecord> MODULES_PKEY = Internal.createUniqueKey(Modules.MODULES, DSL.name("modules_pkey"), new TableField[]{Modules.MODULES.ID}, true);
    public static final UniqueKey<ModulesRecord> UNIQUE_VERSION_NAMESPACE = Internal.createUniqueKey(Modules.MODULES, DSL.name("unique_version_namespace"), new TableField[]{Modules.MODULES.PACKAGE_VERSION_ID, Modules.MODULES.MODULE_NAME_ID}, true);
    public static final UniqueKey<PackageVersionsRecord> PACKAGE_VERSIONS_PKEY = Internal.createUniqueKey(PackageVersions.PACKAGE_VERSIONS, DSL.name("package_versions_pkey"), new TableField[]{PackageVersions.PACKAGE_VERSIONS.ID}, true);
    public static final UniqueKey<PackageVersionsRecord> UNIQUE_PACKAGE_VERSION_GENERATOR = Internal.createUniqueKey(PackageVersions.PACKAGE_VERSIONS, DSL.name("unique_package_version_generator"), new TableField[]{PackageVersions.PACKAGE_VERSIONS.PACKAGE_ID, PackageVersions.PACKAGE_VERSIONS.VERSION, PackageVersions.PACKAGE_VERSIONS.CG_GENERATOR}, true);
    public static final UniqueKey<PackagesRecord> PACKAGES_PKEY = Internal.createUniqueKey(Packages.PACKAGES, DSL.name("packages_pkey"), new TableField[]{Packages.PACKAGES.ID}, true);
    public static final UniqueKey<PackagesRecord> UNIQUE_PACKAGE_FORGE = Internal.createUniqueKey(Packages.PACKAGES, DSL.name("unique_package_forge"), new TableField[]{Packages.PACKAGES.PACKAGE_NAME, Packages.PACKAGES.FORGE}, true);
    public static final UniqueKey<VirtualImplementationsRecord> UNIQUE_VIRTUAL_IMPLEMENTATION = Internal.createUniqueKey(VirtualImplementations.VIRTUAL_IMPLEMENTATIONS, DSL.name("unique_virtual_implementation"), new TableField[]{VirtualImplementations.VIRTUAL_IMPLEMENTATIONS.VIRTUAL_PACKAGE_VERSION_ID, VirtualImplementations.VIRTUAL_IMPLEMENTATIONS.PACKAGE_VERSION_ID}, true);
    public static final UniqueKey<VulnerabilitiesRecord> UNIQUE_VULNERABILITIES = Internal.createUniqueKey(Vulnerabilities.VULNERABILITIES, DSL.name("unique_vulnerabilities"), new TableField[]{Vulnerabilities.VULNERABILITIES.EXTERNAL_ID}, true);
    public static final UniqueKey<VulnerabilitiesRecord> VULNERABILITIES_PKEY = Internal.createUniqueKey(Vulnerabilities.VULNERABILITIES, DSL.name("vulnerabilities_pkey"), new TableField[]{Vulnerabilities.VULNERABILITIES.ID}, true);
    public static final UniqueKey<VulnerabilitiesXCallablesRecord> UNIQUE_VULN_X_CALLABLE = Internal.createUniqueKey(VulnerabilitiesXCallables.VULNERABILITIES_X_CALLABLES, DSL.name("unique_vuln_x_callable"), new TableField[]{VulnerabilitiesXCallables.VULNERABILITIES_X_CALLABLES.VULNERABILITY_ID, VulnerabilitiesXCallables.VULNERABILITIES_X_CALLABLES.CALLABLE_ID}, true);
    public static final UniqueKey<VulnerabilitiesXPackageVersionsRecord> UNIQUE_VULN_X_PKG_VER = Internal.createUniqueKey(VulnerabilitiesXPackageVersions.VULNERABILITIES_X_PACKAGE_VERSIONS, DSL.name("unique_vuln_x_pkg_ver"), new TableField[]{VulnerabilitiesXPackageVersions.VULNERABILITIES_X_PACKAGE_VERSIONS.VULNERABILITY_ID, VulnerabilitiesXPackageVersions.VULNERABILITIES_X_PACKAGE_VERSIONS.PACKAGE_VERSION_ID}, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BinaryModuleContentsRecord, BinaryModulesRecord> BINARY_MODULE_CONTENTS__BINARY_MODULE_CONTENTS_BINARY_MODULE_ID_FKEY = Internal.createForeignKey(BinaryModuleContents.BINARY_MODULE_CONTENTS, DSL.name("binary_module_contents_binary_module_id_fkey"), new TableField[]{BinaryModuleContents.BINARY_MODULE_CONTENTS.BINARY_MODULE_ID}, Keys.BINARY_MODULES_PKEY, new TableField[]{BinaryModules.BINARY_MODULES.ID}, true);
    public static final ForeignKey<BinaryModuleContentsRecord, FilesRecord> BINARY_MODULE_CONTENTS__BINARY_MODULE_CONTENTS_FILE_ID_FKEY = Internal.createForeignKey(BinaryModuleContents.BINARY_MODULE_CONTENTS, DSL.name("binary_module_contents_file_id_fkey"), new TableField[]{BinaryModuleContents.BINARY_MODULE_CONTENTS.FILE_ID}, Keys.FILES_PKEY, new TableField[]{Files.FILES.ID}, true);
    public static final ForeignKey<BinaryModulesRecord, PackageVersionsRecord> BINARY_MODULES__BINARY_MODULES_PACKAGE_VERSION_ID_FKEY = Internal.createForeignKey(BinaryModules.BINARY_MODULES, DSL.name("binary_modules_package_version_id_fkey"), new TableField[]{BinaryModules.BINARY_MODULES.PACKAGE_VERSION_ID}, Keys.PACKAGE_VERSIONS_PKEY, new TableField[]{PackageVersions.PACKAGE_VERSIONS.ID}, true);
    public static final ForeignKey<CallSitesRecord, CallablesRecord> CALL_SITES__CALL_SITES_SOURCE_ID_FKEY = Internal.createForeignKey(CallSites.CALL_SITES, DSL.name("call_sites_source_id_fkey"), new TableField[]{CallSites.CALL_SITES.SOURCE_ID}, Keys.CALLABLES_PKEY, new TableField[]{Callables.CALLABLES.ID}, true);
    public static final ForeignKey<CallSitesRecord, CallablesRecord> CALL_SITES__CALL_SITES_TARGET_ID_FKEY = Internal.createForeignKey(CallSites.CALL_SITES, DSL.name("call_sites_target_id_fkey"), new TableField[]{CallSites.CALL_SITES.TARGET_ID}, Keys.CALLABLES_PKEY, new TableField[]{Callables.CALLABLES.ID}, true);
    public static final ForeignKey<CallablesRecord, ModulesRecord> CALLABLES__CALLABLES_MODULE_ID_FKEY = Internal.createForeignKey(Callables.CALLABLES, DSL.name("callables_module_id_fkey"), new TableField[]{Callables.CALLABLES.MODULE_ID}, Keys.MODULES_PKEY, new TableField[]{Modules.MODULES.ID}, true);
    public static final ForeignKey<DependenciesRecord, PackagesRecord> DEPENDENCIES__DEPENDENCIES_DEPENDENCY_ID_FKEY = Internal.createForeignKey(Dependencies.DEPENDENCIES, DSL.name("dependencies_dependency_id_fkey"), new TableField[]{Dependencies.DEPENDENCIES.DEPENDENCY_ID}, Keys.PACKAGES_PKEY, new TableField[]{Packages.PACKAGES.ID}, true);
    public static final ForeignKey<DependenciesRecord, PackageVersionsRecord> DEPENDENCIES__DEPENDENCIES_PACKAGE_VERSION_ID_FKEY = Internal.createForeignKey(Dependencies.DEPENDENCIES, DSL.name("dependencies_package_version_id_fkey"), new TableField[]{Dependencies.DEPENDENCIES.PACKAGE_VERSION_ID}, Keys.PACKAGE_VERSIONS_PKEY, new TableField[]{PackageVersions.PACKAGE_VERSIONS.ID}, true);
    public static final ForeignKey<FilesRecord, PackageVersionsRecord> FILES__FILES_PACKAGE_VERSION_ID_FKEY = Internal.createForeignKey(Files.FILES, DSL.name("files_package_version_id_fkey"), new TableField[]{Files.FILES.PACKAGE_VERSION_ID}, Keys.PACKAGE_VERSIONS_PKEY, new TableField[]{PackageVersions.PACKAGE_VERSIONS.ID}, true);
    public static final ForeignKey<ModuleContentsRecord, FilesRecord> MODULE_CONTENTS__MODULE_CONTENTS_FILE_ID_FKEY = Internal.createForeignKey(ModuleContents.MODULE_CONTENTS, DSL.name("module_contents_file_id_fkey"), new TableField[]{ModuleContents.MODULE_CONTENTS.FILE_ID}, Keys.FILES_PKEY, new TableField[]{Files.FILES.ID}, true);
    public static final ForeignKey<ModuleContentsRecord, ModulesRecord> MODULE_CONTENTS__MODULE_CONTENTS_MODULE_ID_FKEY = Internal.createForeignKey(ModuleContents.MODULE_CONTENTS, DSL.name("module_contents_module_id_fkey"), new TableField[]{ModuleContents.MODULE_CONTENTS.MODULE_ID}, Keys.MODULES_PKEY, new TableField[]{Modules.MODULES.ID}, true);
    public static final ForeignKey<ModulesRecord, ModuleNamesRecord> MODULES__MODULES_MODULE_NAME_ID_FKEY = Internal.createForeignKey(Modules.MODULES, DSL.name("modules_module_name_id_fkey"), new TableField[]{Modules.MODULES.MODULE_NAME_ID}, Keys.MODULE_NAMES_PKEY, new TableField[]{ModuleNames.MODULE_NAMES.ID}, true);
    public static final ForeignKey<ModulesRecord, PackageVersionsRecord> MODULES__MODULES_PACKAGE_VERSION_ID_FKEY = Internal.createForeignKey(Modules.MODULES, DSL.name("modules_package_version_id_fkey"), new TableField[]{Modules.MODULES.PACKAGE_VERSION_ID}, Keys.PACKAGE_VERSIONS_PKEY, new TableField[]{PackageVersions.PACKAGE_VERSIONS.ID}, true);
    public static final ForeignKey<PackageVersionsRecord, ArtifactRepositoriesRecord> PACKAGE_VERSIONS__PACKAGE_VERSIONS_ARTIFACT_REPOSITORY_ID_FKEY = Internal.createForeignKey(PackageVersions.PACKAGE_VERSIONS, DSL.name("package_versions_artifact_repository_id_fkey"), new TableField[]{PackageVersions.PACKAGE_VERSIONS.ARTIFACT_REPOSITORY_ID}, Keys.ARTIFACT_REPOSITORIES_PKEY, new TableField[]{ArtifactRepositories.ARTIFACT_REPOSITORIES.ID}, true);
    public static final ForeignKey<PackageVersionsRecord, PackagesRecord> PACKAGE_VERSIONS__PACKAGE_VERSIONS_PACKAGE_ID_FKEY = Internal.createForeignKey(PackageVersions.PACKAGE_VERSIONS, DSL.name("package_versions_package_id_fkey"), new TableField[]{PackageVersions.PACKAGE_VERSIONS.PACKAGE_ID}, Keys.PACKAGES_PKEY, new TableField[]{Packages.PACKAGES.ID}, true);
    public static final ForeignKey<VirtualImplementationsRecord, PackageVersionsRecord> VIRTUAL_IMPLEMENTATIONS__VIRTUAL_IMPLEMENTATIONS_PACKAGE_VERSION_ID_FKEY = Internal.createForeignKey(VirtualImplementations.VIRTUAL_IMPLEMENTATIONS, DSL.name("virtual_implementations_package_version_id_fkey"), new TableField[]{VirtualImplementations.VIRTUAL_IMPLEMENTATIONS.PACKAGE_VERSION_ID}, Keys.PACKAGE_VERSIONS_PKEY, new TableField[]{PackageVersions.PACKAGE_VERSIONS.ID}, true);
    public static final ForeignKey<VirtualImplementationsRecord, PackageVersionsRecord> VIRTUAL_IMPLEMENTATIONS__VIRTUAL_IMPLEMENTATIONS_VIRTUAL_PACKAGE_VERSION_ID_FKEY = Internal.createForeignKey(VirtualImplementations.VIRTUAL_IMPLEMENTATIONS, DSL.name("virtual_implementations_virtual_package_version_id_fkey"), new TableField[]{VirtualImplementations.VIRTUAL_IMPLEMENTATIONS.VIRTUAL_PACKAGE_VERSION_ID}, Keys.PACKAGE_VERSIONS_PKEY, new TableField[]{PackageVersions.PACKAGE_VERSIONS.ID}, true);
    public static final ForeignKey<VulnerabilitiesPurlsRecord, VulnerabilitiesRecord> VULNERABILITIES_PURLS__VULNERABILITIES_PURLS_VULNERABILITY_ID_FKEY = Internal.createForeignKey(VulnerabilitiesPurls.VULNERABILITIES_PURLS, DSL.name("vulnerabilities_purls_vulnerability_id_fkey"), new TableField[]{VulnerabilitiesPurls.VULNERABILITIES_PURLS.VULNERABILITY_ID}, Keys.VULNERABILITIES_PKEY, new TableField[]{Vulnerabilities.VULNERABILITIES.ID}, true);
    public static final ForeignKey<VulnerabilitiesXCallablesRecord, CallablesRecord> VULNERABILITIES_X_CALLABLES__VULNERABILITIES_X_CALLABLES_CALLABLE_ID_FKEY = Internal.createForeignKey(VulnerabilitiesXCallables.VULNERABILITIES_X_CALLABLES, DSL.name("vulnerabilities_x_callables_callable_id_fkey"), new TableField[]{VulnerabilitiesXCallables.VULNERABILITIES_X_CALLABLES.CALLABLE_ID}, Keys.CALLABLES_PKEY, new TableField[]{Callables.CALLABLES.ID}, true);
    public static final ForeignKey<VulnerabilitiesXCallablesRecord, VulnerabilitiesRecord> VULNERABILITIES_X_CALLABLES__VULNERABILITIES_X_CALLABLES_VULNERABILITY_ID_FKEY = Internal.createForeignKey(VulnerabilitiesXCallables.VULNERABILITIES_X_CALLABLES, DSL.name("vulnerabilities_x_callables_vulnerability_id_fkey"), new TableField[]{VulnerabilitiesXCallables.VULNERABILITIES_X_CALLABLES.VULNERABILITY_ID}, Keys.VULNERABILITIES_PKEY, new TableField[]{Vulnerabilities.VULNERABILITIES.ID}, true);
    public static final ForeignKey<VulnerabilitiesXPackageVersionsRecord, PackageVersionsRecord> VULNERABILITIES_X_PACKAGE_VERSIONS__VULNERABILITIES_X_PACKAGE_VERSIONS_PACKAGE_VERSION_ID_FKEY = Internal.createForeignKey(VulnerabilitiesXPackageVersions.VULNERABILITIES_X_PACKAGE_VERSIONS, DSL.name("vulnerabilities_x_package_versions_package_version_id_fkey"), new TableField[]{VulnerabilitiesXPackageVersions.VULNERABILITIES_X_PACKAGE_VERSIONS.PACKAGE_VERSION_ID}, Keys.PACKAGE_VERSIONS_PKEY, new TableField[]{PackageVersions.PACKAGE_VERSIONS.ID}, true);
    public static final ForeignKey<VulnerabilitiesXPackageVersionsRecord, VulnerabilitiesRecord> VULNERABILITIES_X_PACKAGE_VERSIONS__VULNERABILITIES_X_PACKAGE_VERSIONS_VULNERABILITY_ID_FKEY = Internal.createForeignKey(VulnerabilitiesXPackageVersions.VULNERABILITIES_X_PACKAGE_VERSIONS, DSL.name("vulnerabilities_x_package_versions_vulnerability_id_fkey"), new TableField[]{VulnerabilitiesXPackageVersions.VULNERABILITIES_X_PACKAGE_VERSIONS.VULNERABILITY_ID}, Keys.VULNERABILITIES_PKEY, new TableField[]{Vulnerabilities.VULNERABILITIES.ID}, true);
}
