/*
 * This file is generated by jOOQ.
 */
package eu.fasten.core.data.metadatadb.codegen.tables;


import eu.fasten.core.data.metadatadb.codegen.Keys;
import eu.fasten.core.data.metadatadb.codegen.Public;
import eu.fasten.core.data.metadatadb.codegen.tables.records.IngestionRetriesRecord;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IngestionRetries extends TableImpl<IngestionRetriesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ingestion_retries</code>
     */
    public static final IngestionRetries INGESTION_RETRIES = new IngestionRetries();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IngestionRetriesRecord> getRecordType() {
        return IngestionRetriesRecord.class;
    }

    /**
     * The column <code>public.ingestion_retries.key</code>.
     */
    public final TableField<IngestionRetriesRecord, String> KEY = createField(DSL.name("key"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.ingestion_retries.count</code>.
     */
    public final TableField<IngestionRetriesRecord, Short> COUNT = createField(DSL.name("count"), SQLDataType.SMALLINT.nullable(false), this, "");

    private IngestionRetries(Name alias, Table<IngestionRetriesRecord> aliased) {
        this(alias, aliased, null);
    }

    private IngestionRetries(Name alias, Table<IngestionRetriesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.ingestion_retries</code> table reference
     */
    public IngestionRetries(String alias) {
        this(DSL.name(alias), INGESTION_RETRIES);
    }

    /**
     * Create an aliased <code>public.ingestion_retries</code> table reference
     */
    public IngestionRetries(Name alias) {
        this(alias, INGESTION_RETRIES);
    }

    /**
     * Create a <code>public.ingestion_retries</code> table reference
     */
    public IngestionRetries() {
        this(DSL.name("ingestion_retries"), null);
    }

    public <O extends Record> IngestionRetries(Table<O> child, ForeignKey<O, IngestionRetriesRecord> key) {
        super(child, key, INGESTION_RETRIES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<IngestionRetriesRecord> getPrimaryKey() {
        return Keys.INGESTION_RETRIES_PKEY;
    }

    @Override
    public IngestionRetries as(String alias) {
        return new IngestionRetries(DSL.name(alias), this);
    }

    @Override
    public IngestionRetries as(Name alias) {
        return new IngestionRetries(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public IngestionRetries rename(String name) {
        return new IngestionRetries(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IngestionRetries rename(Name name) {
        return new IngestionRetries(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Short> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
