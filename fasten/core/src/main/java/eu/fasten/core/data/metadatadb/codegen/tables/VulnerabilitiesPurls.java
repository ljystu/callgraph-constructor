/*
 * This file is generated by jOOQ.
 */
package eu.fasten.core.data.metadatadb.codegen.tables;


import eu.fasten.core.data.metadatadb.codegen.Indexes;
import eu.fasten.core.data.metadatadb.codegen.Keys;
import eu.fasten.core.data.metadatadb.codegen.Public;
import eu.fasten.core.data.metadatadb.codegen.tables.records.VulnerabilitiesPurlsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VulnerabilitiesPurls extends TableImpl<VulnerabilitiesPurlsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.vulnerabilities_purls</code>
     */
    public static final VulnerabilitiesPurls VULNERABILITIES_PURLS = new VulnerabilitiesPurls();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VulnerabilitiesPurlsRecord> getRecordType() {
        return VulnerabilitiesPurlsRecord.class;
    }

    /**
     * The column <code>public.vulnerabilities_purls.vulnerability_id</code>.
     */
    public final TableField<VulnerabilitiesPurlsRecord, Long> VULNERABILITY_ID = createField(DSL.name("vulnerability_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.vulnerabilities_purls.purl</code>.
     */
    public final TableField<VulnerabilitiesPurlsRecord, String> PURL = createField(DSL.name("purl"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.vulnerabilities_purls.forge</code>.
     */
    public final TableField<VulnerabilitiesPurlsRecord, String> FORGE = createField(DSL.name("forge"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.vulnerabilities_purls.package_name</code>.
     */
    public final TableField<VulnerabilitiesPurlsRecord, String> PACKAGE_NAME = createField(DSL.name("package_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.vulnerabilities_purls.package_version</code>.
     */
    public final TableField<VulnerabilitiesPurlsRecord, String> PACKAGE_VERSION = createField(DSL.name("package_version"), SQLDataType.CLOB.nullable(false), this, "");

    private VulnerabilitiesPurls(Name alias, Table<VulnerabilitiesPurlsRecord> aliased) {
        this(alias, aliased, null);
    }

    private VulnerabilitiesPurls(Name alias, Table<VulnerabilitiesPurlsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.vulnerabilities_purls</code> table
     * reference
     */
    public VulnerabilitiesPurls(String alias) {
        this(DSL.name(alias), VULNERABILITIES_PURLS);
    }

    /**
     * Create an aliased <code>public.vulnerabilities_purls</code> table
     * reference
     */
    public VulnerabilitiesPurls(Name alias) {
        this(alias, VULNERABILITIES_PURLS);
    }

    /**
     * Create a <code>public.vulnerabilities_purls</code> table reference
     */
    public VulnerabilitiesPurls() {
        this(DSL.name("vulnerabilities_purls"), null);
    }

    public <O extends Record> VulnerabilitiesPurls(Table<O> child, ForeignKey<O, VulnerabilitiesPurlsRecord> key) {
        super(child, key, VULNERABILITIES_PURLS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.VULNERABILITIES_PURLS_MULTI, Indexes.VULNERABILITIES_PURLS_VULNERABILITY_ID, Indexes.VULNERABILITY_PURLS_PURL);
    }

    @Override
    public List<ForeignKey<VulnerabilitiesPurlsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.VULNERABILITIES_PURLS__VULNERABILITIES_PURLS_VULNERABILITY_ID_FKEY);
    }

    private transient Vulnerabilities _vulnerabilities;

    /**
     * Get the implicit join path to the <code>public.vulnerabilities</code>
     * table.
     */
    public Vulnerabilities vulnerabilities() {
        if (_vulnerabilities == null)
            _vulnerabilities = new Vulnerabilities(this, Keys.VULNERABILITIES_PURLS__VULNERABILITIES_PURLS_VULNERABILITY_ID_FKEY);

        return _vulnerabilities;
    }

    @Override
    public VulnerabilitiesPurls as(String alias) {
        return new VulnerabilitiesPurls(DSL.name(alias), this);
    }

    @Override
    public VulnerabilitiesPurls as(Name alias) {
        return new VulnerabilitiesPurls(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VulnerabilitiesPurls rename(String name) {
        return new VulnerabilitiesPurls(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VulnerabilitiesPurls rename(Name name) {
        return new VulnerabilitiesPurls(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
