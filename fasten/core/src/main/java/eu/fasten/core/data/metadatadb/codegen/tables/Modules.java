/*
 * This file is generated by jOOQ.
 */
package eu.fasten.core.data.metadatadb.codegen.tables;


import eu.fasten.core.data.metadatadb.codegen.Indexes;
import eu.fasten.core.data.metadatadb.codegen.Keys;
import eu.fasten.core.data.metadatadb.codegen.Public;
import eu.fasten.core.data.metadatadb.codegen.enums.Access;
import eu.fasten.core.data.metadatadb.codegen.tables.records.ModulesRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "https://www.jooq.org",
                "jOOQ version:3.16.3"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Modules extends TableImpl<ModulesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.modules</code>
     */
    public static final Modules MODULES = new Modules();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModulesRecord> getRecordType() {
        return ModulesRecord.class;
    }

    /**
     * The column <code>public.modules.id</code>.
     */
    public final TableField<ModulesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.modules.package_version_id</code>.
     */
    public final TableField<ModulesRecord, Long> PACKAGE_VERSION_ID = createField(DSL.name("package_version_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.modules.module_name_id</code>.
     */
    public final TableField<ModulesRecord, Long> MODULE_NAME_ID = createField(DSL.name("module_name_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.modules.final</code>.
     */
    public final TableField<ModulesRecord, Boolean> FINAL = createField(DSL.name("final"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.modules.access</code>.
     */
    public final TableField<ModulesRecord, Access> ACCESS = createField(DSL.name("access"), SQLDataType.VARCHAR.asEnumDataType(eu.fasten.core.data.metadatadb.codegen.enums.Access.class), this, "");

    /**
     * The column <code>public.modules.super_classes</code>.
     */
    public final TableField<ModulesRecord, Long[]> SUPER_CLASSES = createField(DSL.name("super_classes"), SQLDataType.BIGINT.getArrayDataType(), this, "");

    /**
     * The column <code>public.modules.super_interfaces</code>.
     */
    public final TableField<ModulesRecord, Long[]> SUPER_INTERFACES = createField(DSL.name("super_interfaces"), SQLDataType.BIGINT.getArrayDataType(), this, "");

    /**
     * The column <code>public.modules.metadata</code>.
     */
    public final TableField<ModulesRecord, JSONB> METADATA = createField(DSL.name("metadata"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.modules.annotations</code>.
     */
    public final TableField<ModulesRecord, JSONB> ANNOTATIONS = createField(DSL.name("annotations"), SQLDataType.JSONB, this, "");

    private Modules(Name alias, Table<ModulesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Modules(Name alias, Table<ModulesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.modules</code> table reference
     */
    public Modules(String alias) {
        this(DSL.name(alias), MODULES);
    }

    /**
     * Create an aliased <code>public.modules</code> table reference
     */
    public Modules(Name alias) {
        this(alias, MODULES);
    }

    /**
     * Create a <code>public.modules</code> table reference
     */
    public Modules() {
        this(DSL.name("modules"), null);
    }

    public <O extends Record> Modules(Table<O> child, ForeignKey<O, ModulesRecord> key) {
        super(child, key, MODULES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.MODULES_PACKAGE_VERSION_ID);
    }

    @Override
    public Identity<ModulesRecord, Long> getIdentity() {
        return (Identity<ModulesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ModulesRecord> getPrimaryKey() {
        return Keys.MODULES_PKEY;
    }

    @Override
    public List<UniqueKey<ModulesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_VERSION_NAMESPACE);
    }

    @Override
    public List<ForeignKey<ModulesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MODULES__MODULES_PACKAGE_VERSION_ID_FKEY, Keys.MODULES__MODULES_MODULE_NAME_ID_FKEY);
    }

    private transient PackageVersions _packageVersions;
    private transient ModuleNames _moduleNames;

    /**
     * Get the implicit join path to the <code>public.package_versions</code>
     * table.
     */
    public PackageVersions packageVersions() {
        if (_packageVersions == null)
            _packageVersions = new PackageVersions(this, Keys.MODULES__MODULES_PACKAGE_VERSION_ID_FKEY);

        return _packageVersions;
    }

    /**
     * Get the implicit join path to the <code>public.module_names</code> table.
     */
    public ModuleNames moduleNames() {
        if (_moduleNames == null)
            _moduleNames = new ModuleNames(this, Keys.MODULES__MODULES_MODULE_NAME_ID_FKEY);

        return _moduleNames;
    }

    @Override
    public Modules as(String alias) {
        return new Modules(DSL.name(alias), this);
    }

    @Override
    public Modules as(Name alias) {
        return new Modules(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Modules rename(String name) {
        return new Modules(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Modules rename(Name name) {
        return new Modules(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, Long, Boolean, Access, Long[], Long[], JSONB, JSONB> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
