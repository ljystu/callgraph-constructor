/*
 * This file is generated by jOOQ.
 */
package eu.fasten.core.data.metadatadb.codegen.tables;


import eu.fasten.core.data.metadatadb.codegen.Keys;
import eu.fasten.core.data.metadatadb.codegen.Public;
import eu.fasten.core.data.metadatadb.codegen.tables.records.VulnerabilitiesRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "https://www.jooq.org",
                "jOOQ version:3.16.3"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Vulnerabilities extends TableImpl<VulnerabilitiesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.vulnerabilities</code>
     */
    public static final Vulnerabilities VULNERABILITIES = new Vulnerabilities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VulnerabilitiesRecord> getRecordType() {
        return VulnerabilitiesRecord.class;
    }

    /**
     * The column <code>public.vulnerabilities.id</code>.
     */
    public final TableField<VulnerabilitiesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.vulnerabilities.external_id</code>.
     */
    public final TableField<VulnerabilitiesRecord, String> EXTERNAL_ID = createField(DSL.name("external_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.vulnerabilities.statement</code>.
     */
    public final TableField<VulnerabilitiesRecord, JSONB> STATEMENT = createField(DSL.name("statement"), SQLDataType.JSONB.nullable(false), this, "");

    private Vulnerabilities(Name alias, Table<VulnerabilitiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Vulnerabilities(Name alias, Table<VulnerabilitiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.vulnerabilities</code> table reference
     */
    public Vulnerabilities(String alias) {
        this(DSL.name(alias), VULNERABILITIES);
    }

    /**
     * Create an aliased <code>public.vulnerabilities</code> table reference
     */
    public Vulnerabilities(Name alias) {
        this(alias, VULNERABILITIES);
    }

    /**
     * Create a <code>public.vulnerabilities</code> table reference
     */
    public Vulnerabilities() {
        this(DSL.name("vulnerabilities"), null);
    }

    public <O extends Record> Vulnerabilities(Table<O> child, ForeignKey<O, VulnerabilitiesRecord> key) {
        super(child, key, VULNERABILITIES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<VulnerabilitiesRecord, Long> getIdentity() {
        return (Identity<VulnerabilitiesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<VulnerabilitiesRecord> getPrimaryKey() {
        return Keys.VULNERABILITIES_PKEY;
    }

    @Override
    public List<UniqueKey<VulnerabilitiesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_VULNERABILITIES);
    }

    @Override
    public Vulnerabilities as(String alias) {
        return new Vulnerabilities(DSL.name(alias), this);
    }

    @Override
    public Vulnerabilities as(Name alias) {
        return new Vulnerabilities(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Vulnerabilities rename(String name) {
        return new Vulnerabilities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vulnerabilities rename(Name name) {
        return new Vulnerabilities(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, JSONB> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
