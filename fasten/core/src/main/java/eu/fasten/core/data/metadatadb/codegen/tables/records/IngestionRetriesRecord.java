/*
 * This file is generated by jOOQ.
 */
package eu.fasten.core.data.metadatadb.codegen.tables.records;


import eu.fasten.core.data.metadatadb.codegen.tables.IngestionRetries;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IngestionRetriesRecord extends UpdatableRecordImpl<IngestionRetriesRecord> implements Record2<String, Short> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.ingestion_retries.key</code>.
     */
    public void setKey(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.ingestion_retries.key</code>.
     */
    public String getKey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.ingestion_retries.count</code>.
     */
    public void setCount(Short value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.ingestion_retries.count</code>.
     */
    public Short getCount() {
        return (Short) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Short> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, Short> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return IngestionRetries.INGESTION_RETRIES.KEY;
    }

    @Override
    public Field<Short> field2() {
        return IngestionRetries.INGESTION_RETRIES.COUNT;
    }

    @Override
    public String component1() {
        return getKey();
    }

    @Override
    public Short component2() {
        return getCount();
    }

    @Override
    public String value1() {
        return getKey();
    }

    @Override
    public Short value2() {
        return getCount();
    }

    @Override
    public IngestionRetriesRecord value1(String value) {
        setKey(value);
        return this;
    }

    @Override
    public IngestionRetriesRecord value2(Short value) {
        setCount(value);
        return this;
    }

    @Override
    public IngestionRetriesRecord values(String value1, Short value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached IngestionRetriesRecord
     */
    public IngestionRetriesRecord() {
        super(IngestionRetries.INGESTION_RETRIES);
    }

    /**
     * Create a detached, initialised IngestionRetriesRecord
     */
    public IngestionRetriesRecord(String key, Short count) {
        super(IngestionRetries.INGESTION_RETRIES);

        setKey(key);
        setCount(count);
    }
}
