package ljystu.project.callgraph;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONException;
import com.alibaba.fastjson.JSONObject;
import ljystu.project.callgraph.entity.Node;
import ljystu.project.callgraph.uploader.Neo4jOp;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

import static ljystu.project.callgraph.uploader.CallGraphUploader.typeTransform;

public class VulnerabilityDetector {
    private static final String HOST = "https://api.fasten-project.eu";
    private static final String DEPENDENCY_NAME = "com.thoughtworks.xstream:xstream";
    private static final String VERSION = "1.4.9";

    public static String callAPI(String urlString) {
        try {
            URL url = new URL(urlString);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            conn.connect();

            int responseCode = conn.getResponseCode();
            if (responseCode == 200) {
                Scanner scanner = new Scanner(conn.getInputStream());
                StringBuilder response = new StringBuilder();
                while (scanner.hasNextLine()) {
                    response.append(scanner.nextLine());
                }
                scanner.close();
                return response.toString();
            } else {
                System.out.println("An error occurred. HTTP status code: " + responseCode);
                return null;
            }
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    public static List<String> getVulnerabilityIDs() {
        String url = HOST + "/api/mvn/packages/" + DEPENDENCY_NAME + "/" + VERSION + "/vulnerabilities?attributes=external_id";
        String response = callAPI(url);
        List<String> vulnerabilityIDs = new ArrayList<>();
        if (response != null) {

            // Parse the JSON response and extract the vulnerability IDs
            // ...
            try {
                JSONArray jsonArray = JSONArray.parseArray(response);

                for (int i = 0; i < jsonArray.size(); i++) {
                    JSONObject jsonObject = jsonArray.getJSONObject(i);
                    String externalID = jsonObject.getString("external_id");

                    System.out.println("External ID: " + externalID);
                    vulnerabilityIDs.add(externalID);
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }
        return vulnerabilityIDs;
    }

    public static List<Map<String, Object>> getVulnerableMethods(String vulnerabilityID) throws UnsupportedEncodingException {
        String url = HOST + "/api/mvn/vulnerabilities/" + vulnerabilityID + "/callables";
        String response = callAPI(url);
        List<Node> vulnerableMethods = new ArrayList<>();
        List<Map<String, Object>> vulnerabilities = new ArrayList<>();
        if (response != null) {
            // Parse the JSON response and extract the vulnerable methods
            // ...

            JSONObject jsonObject = JSONObject.parseObject(response);
            for (String key : jsonObject.keySet()) {
                String uri = jsonObject.getString(key);
                String[] parts = uri.split("/");
                String version = parts[2].split("\\$")[1];
                if (!version.equals(VERSION))
                    continue;
                String packageName = parts[3];
                parts[4] = URLDecoder.decode(parts[4], "UTF-8");

                String signature = parts[4].replace("/", ".");
//                System.out.println(signature);
                String className = signature.substring(0, signature.indexOf("."));

                String methodName = signature.substring(signature.indexOf(".") + 1, signature.indexOf("("));

                String params = signature.substring(signature.indexOf("(") + 1, signature.indexOf(")"));

                String[] param = params.split(",");
                StringBuilder str = new StringBuilder();
                if (param.length > 0) {
                    for (int i = 0; i < param.length; i++) {
                        if (param[i].length() == 0) break;
                        String paramType = param[i].substring(1);
                        paramType = typeTransform(paramType);
                        str.append(paramType).append(",");
                    }
                    if (str.length() > 0)
                        str.setLength(str.length() - 1);
                }
                params = str.toString();
                String returnType = signature.substring(signature.indexOf(")") + 2);
                returnType = typeTransform(returnType);

                Node vulnerableNode = new Node(packageName, className, methodName, params, returnType);
                vulnerableNode.setCoordinate(DEPENDENCY_NAME + ":" + VERSION);
                vulnerableMethods.add(vulnerableNode);

                vulnerabilities.add(vulnerableNode.toMap());

                System.out.println("Package Name: " + packageName);
                System.out.println("Class Name: " + className);
                System.out.println("Method Name: " + methodName);
                System.out.println("Params: " + params);
                System.out.println("Return Type: " + returnType);
                System.out.println("-----------------------");
                System.out.println("Vulnerable Node: " + vulnerableNode.toString());
            }

        }

        return vulnerabilities;
    }


    public static void main(String[] args) throws UnsupportedEncodingException {
        List<String> vulnerabilityIDs = getVulnerabilityIDs();
        List<Map<String, Object>> vulnerableMethods = new ArrayList<>();
        if (vulnerabilityIDs != null) {
            for (String vulnerabilityID : vulnerabilityIDs) {
                List<Map<String, Object>> methods = getVulnerableMethods(vulnerabilityID);
                System.out.println(methods.size());
                vulnerableMethods.addAll(methods);
            }
        }
        for (Map<String, Object> vulnerableMethod : vulnerableMethods) {
            System.out.println(vulnerableMethod);
        }
        System.out.println("-----------------------");
        System.out.println(vulnerableMethods.size());
        String label = DEPENDENCY_NAME.substring(DEPENDENCY_NAME.indexOf(":") + 1);
        Neo4jOp neo4jOp = new Neo4jOp("bolt://localhost:7687", "neo4j", "ljystuneo");
//        for (Map<String, Object> vulnerableMethod : vulnerableMethods) {
//            neo4jOp.addVulnerableLabel(vulnerableMethod,label);
//        }

        neo4jOp.addBatchVulnerableLabel(vulnerableMethods, label);
    }
}

